import React, { useState, useEffect } from "react";
import gameStyles from "../styles/Game.module.css";
import Link from "next/link";
import Head from "next/head";

export default function Game() {
  const [squares, setSquares] = useState(Array(9).fill(null));
  const [currentPlayer, setCurrentPlayer] = useState("X");
  const [isDarkMode, setIsDarkMode] = useState(null);

  //get system theme
  useEffect(() => {
    setIsDarkMode(
      window.matchMedia("(prefers-color-scheme: dark)").matches ? true : false
    );
  }, []);
  const theme = isDarkMode ? "dark" : "light";
  console.log(theme);

  //dynamically update theme of application based on theme
  useEffect(() => {
    document.body.className = `${gameStyles[theme]}`;
  }, [theme]);

  //check the result of the game on component re-render
  let rawResult = getResult(squares);
  let result = null;
  let winningCombination = [];
  if (rawResult === "draw") {
    result = "draw";
  } else if (rawResult) {
    result = squares[rawResult[0]];
    winningCombination = [...rawResult];
  }

  //handles user click on one of the tiles
  const handleTileClick = (index) => {
    if (result || squares[index]) return;
    const newState = [...squares];
    newState[index] = currentPlayer;
    setSquares(newState);
    setCurrentPlayer(currentPlayer === "X" ? "O" : "X");
  };

  //handles reset button click
  const handleReset = () => {
    setSquares(Array(9).fill(null));
    setCurrentPlayer("X");
    result = null;
  };

  //renders squares based on its location
  const renderSquare = (index) => {
    const isIconDisabled = result ? "icon-disabled" : "";
    const appearClass = squares[index] ? "appear" : "";
    return (
      <div
        className={`${gameStyles.square} ${
          gameStyles[indexToPositionList[index]]
        }`}
        onClick={() => handleTileClick(index)}
      >
        <div
          className={`${gameStyles[appearClass]} ${
            winningCombination.includes(index) && gameStyles.winTile
          } ${gameStyles[isIconDisabled]}`}
        >
          {squares[index]}
        </div>
      </div>
    );
  };

  //decides what text to put as the result indicator
  const resultButtonText = (result) => {
    switch (result) {
      case "draw":
        return "It's a draw!";
      case "X":
        return "X wins!";
      case "O":
        return "O wins!";
      default:
        return `${currentPlayer}, your turn now!`;
    }
  };

  //main JSX
  return (
    <>
      <Head>
        <title>Tic-Tac-Toe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${gameStyles.main} ${gameStyles[theme]}`}>
        <Link href="/" className={`${gameStyles.homeLink}`}>
          <u>Home</u>
        </Link>
        <button
          className={`${gameStyles.themeSelector}`}
          onClick={() => setIsDarkMode(!isDarkMode)}
        ></button>
        <div className={gameStyles.gameContainer}>
          <div className={`${gameStyles.board}`}>
            {renderSquare(0)}
            {renderSquare(1)}
            {renderSquare(2)}
            {renderSquare(3)}
            {renderSquare(4)}
            {renderSquare(5)}
            {renderSquare(6)}
            {renderSquare(7)}
            {renderSquare(8)}
          </div>
          <div className={`${gameStyles.infoContainer}`}>
            <button
              className={`${gameStyles.resetButton}`}
              onClick={handleReset}
            >
              Reset
            </button>
            <button
              className={`${gameStyles.resetButton} ${
                result && gameStyles.celebrate
              }`}
            >
              {resultButtonText(result)}
            </button>
          </div>
        </div>
      </main>
    </>
  );
}

//calculates result of game; winning combination indexes or draw or null if no result
function getResult(squares) {
  for (let i = 0; i < winningCombinations.length; i++) {
    const [a, b, c] = winningCombinations[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return [a, b, c];
    }
  }
  if (squares.every((square) => square !== null)) {
    return "draw";
  }
  return null;
}

const winningCombinations = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
];

const indexToPositionList = [
  "topLeft",
  "top",
  "topRight",
  "middleLeft",
  "middle",
  "middleRight",
  "bottomLeft",
  "bottom",
  "bottomRight",
];
