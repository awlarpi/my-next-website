import React, { useState, useRef, useEffect } from "react";
import gameStyles from "../styles/Game.module.css";
import Link from "next/link";
import Head from "next/head";
import { Oswald } from "@next/font/google";

const oswald = Oswald({
  subsets: ["latin"],
  weight: ["400"],
  style: ["normal"],
});

export default function Game() {
  const [squares, setSquares] = useState(Array(9).fill(null));
  const [currentPlayer, setCurrentPlayer] = useState("X");

  let rawResult = getResult(squares);
  let result = null;
  let winningCombination = [];

  if (rawResult === "draw") {
    result = "draw";
  } else if (rawResult) {
    result = squares[rawResult[0]];
    winningCombination = [...rawResult];
  }

  const handleTileClick = (index) => {
    if (result || squares[index]) return;
    setSquares((prevState) => {
      const newState = [...prevState];
      newState[index] = currentPlayer;
      return newState;
    });
    setCurrentPlayer(currentPlayer === "X" ? "O" : "X");
  };

  const handleReset = () => {
    setSquares(Array(9).fill(null));
    setCurrentPlayer("X");
    result = null;
  };

  const renderSquare = (index) => {
    const disabledClass = result ? "disabled" : "";
    const symbolClass = squares[index] ? "symbol" : "";
    return (
      <div
        className={`${gameStyles.square} ${
          gameStyles[indexToPositionList[index]]
        }`}
        onClick={() => handleTileClick(index)}
        disabled={squares[index]}
      >
        <div
          className={`${oswald.className} ${gameStyles[symbolClass]} ${
            winningCombination.includes(index) && gameStyles.winTile
          } ${gameStyles[disabledClass]}`}
        >
          {squares[index]}
        </div>
      </div>
    );
  };

  const resultButtonText = (result) => {
    switch (result) {
      case "draw":
        return "It's a draw!";
      case "X":
        return "X wins!";
      case "O":
        return "O wins!";
      default:
        return `${currentPlayer}, your turn now!`;
    }
  };

  return (
    <div>
      <Head>
        <title>Tic Tac Toe</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Link href="/" className={`${gameStyles.homeLink} ${oswald.className}`}>
        <u>Home</u>
      </Link>
      <div className={`${oswald.className} ${gameStyles.pageContainer}`}>
        <div className={gameStyles.gameContainer}>
          <div
            className={`${gameStyles.board} ${
              result === "draw" ? gameStyles.tie : ""
            }`}
          >
            {renderSquare(0)}
            {renderSquare(1)}
            {renderSquare(2)}
            {renderSquare(3)}
            {renderSquare(4)}
            {renderSquare(5)}
            {renderSquare(6)}
            {renderSquare(7)}
            {renderSquare(8)}
          </div>
          <div className={`${gameStyles.infoContainer}`}>
            <button
              className={`${gameStyles.resetButton} ${oswald.className}`}
              onClick={handleReset}
            >
              Reset
            </button>
            <button
              className={`${oswald.className} ${gameStyles.resetButton} ${
                result && gameStyles.celebrate
              }`}
            >
              {resultButtonText(result)}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

const getResult = (squares) => {
  for (let i = 0; i < winningCombinations.length; i++) {
    const [a, b, c] = winningCombinations[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return [a, b, c];
    }
  }
  if (squares.every((square) => square !== null)) {
    return "draw";
  }
  return null;
};

const winningCombinations = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
];

const indexToPositionList = [
  "topLeft",
  "top",
  "topRight",
  "middleLeft",
  "middle",
  "middleRight",
  "bottomLeft",
  "bottom",
  "bottomRight",
];
